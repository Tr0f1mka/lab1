
"""------------------------------------
   --парсер арифметического выражения--
   ------------------------------------
"""



"""-------------библиотеки-------------"""

import re  # noqa: E402




"""--------------паттерны---------------"""

NUM = r"\d+(?:\.\d+)?"                                  #шаблон числа без знака
SIGNED_AT_START = rf"(?<=^) [+\-]?{NUM}"                #шаблон числа с унарным знаком в начале выражения
SIGNED_AFTER_OP = rf"(?<=[ + \- * / ( ]) [+\-]?{NUM}"   #шаблон числа с унарным знаком после оператора или '('
PLAIN_NUMBER    = rf"(?<![\d\)]) {NUM}"                 #шаблон числа без унарного знака, если перед ним нет другого числа или '('

#шаблон для пасинга строки
pattern = rf"""\s*(
  {SIGNED_AT_START}   |
  {SIGNED_AFTER_OP}   |
  \*\*                |
  //                  |
  [%()+\-*/]          |
  {PLAIN_NUMBER}
)
"""

TOKEN_RE = re.compile(pattern, re.VERBOSE)



"""----------функции----------"""

def tokens(s: str) -> list[str]:
    """
    Парсер математического выражения
    :param s: Строка, являющаяся математическим выражением
    :return: Список строк, состоящий из элементов математического выражения
    """
    
    return [m.group(1) for m in TOKEN_RE.finditer(s)]



tests = [
    "-5+2*3",
    "+7--2*3",
    "(-2+3)*4",
    "2**3**2",
    "7//3+7%3",
    "12/-3*(+2)",
]
#for t in tests:
#    print(t, "=>", *tokens(t))